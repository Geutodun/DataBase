❑ Three-tier architecture
▪ Presentation tier : 사용자에게 보여지는 부분을 담당하는 tier
▪ Logic tier : 서비스와 관련된 기능과 정책등등 비즈니스 로직을 담당하는 tier
▪ Data tier : 데이터를 저장하고 관리하고 제공하는 역할을 하는 tier


❑ 비지니스 로직이란? (ex. 당근마켓)
▪ 회원가입/탈퇴
▪ 상품 리스트업 알고리즘
▪ 상품 정보 업로드 기능
▪ 상품 검색 가능
▪ 메세지 가능
등등


❑ 데이터 (ex. 당근마켓)
▪ 회원 정보
▪ 판매/구매 내역
▪ 상품 정보
▪ 지역 정보 
등등


❑ Stored procedure
▪ RDBMS에 저장되고 사용되는 프로시저, 주된 사용 목적은 비지니스 로직 구현


❑ Stored procedure 장점
▪ application에 transparent 하다
▪ network traffic을 줄여서 응답속도 향상 가능
▪ 여러 서비스에서 재사용 가능
▪ 민감한 정보에 대한 접근을 제한할 수 있다.


❑ Stored procedure 단점
▪ 유지 괸리 보수 비용이 커진다.
▪ DB 서버를 추가하는 것이 간단하지 않다.
▪ logic tier에 애플리케이션 서버 투입은 간단한다.
▪ 언제나 transparent인건 아니다.
▪ transparent 하다고 무조건 좋은 것도 아니다. 
▪ 재사용 가능하다는 것은 양날의 검
▪ 비지니스 로직을 소스 코드에 두고도 응답 속도를 향상 시킬 수 있다.
▪ 민감한 정보에 대한 접근을 완변히 제한 할 수 있다. 개발 및 CS 업무의 신속함이 떨어진다.
▪ procedure로는 복잡하고 유연한 코드를 작성하기 어렵다.
▪ procedure는 디버깅이 어렵고 가독성이 떨어진다.
▪ 오늘날의 프로그래밍 언어는 훨씬 다양하고 강력한 기능들을 제공한다.




**참고사항**
▪ 일반적인 백엔드 아키텍처를 기준으로 정리한 내용, 상황에 따라서 다르다.
