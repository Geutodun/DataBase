❑ set : 서로 다른 elements를 가지는 collection
▪ 하나의 set에서 elements의 순서는 중요하지 않다
▪ eg) {1,3,11,4,7}



❑ relational in mathematics : subset(부분집합) of Cartesian product
▪ set of tuples



❑ relational in mathematics & relational data model
▪ set = 도메인
▪ element = 값(value)



❑ relational data model
▪ 주요 개념
  • domain : set of values
  • domain name : domain 이름
  • attribute : domain이 relation에서 맡은 역할 이름
  • tuple : 각 attribute의 값으로 이루어진 이스트, 일부 값은 NULL일 수 있다
  • relation : set of tuples
  • relation name : relation의 이름



❑ relation schema : relation의 구조를 나타낸다.
▪ relation 이름과 attributes 리스트로 표기
▪ attributes와 관련된 constraints도 포함
▪ e.g) STUDENT(id, name, grade, major, phone_num)



❑ degree of relation : relation schema에서 attributes의 수
▪ e.g) STUDENT(id, name, grade, major, phone_num) ➔ degree 5



❑ relation database : relational data model에 기반화여 구조화된 database
▪ relation database는 여러 개의 relations로 구성된다



❑ relation database schema : relation schema set + integrity constraints set



❑ relation의 특징
▪ relation은 중복된 tuple을 가질 수 없다 ( relation is set of tuples )
▪ relation의 tuple을 식별하기 위해 attribute의 부분 집합을 key로 설정
▪ relation에서 tuple의 순서는 중요하지 않다
▪ 하나의 relation에서 attribute의 이름은 중복되면 안된다
▪ 하나의 tuple에서 attribute의 순서는 중요하지 않다
▪ attribute는 atomic(원자적인, 더이상 나누어질 수 없는)해야 한다 [ composite or multivalued attribute 허용 안됨 ]



❑ NULL의 의미 
▪ 값이 존재하지 않는다
▪ 값이 존재하나 아직 그 값이 무엇인지 알지 못한다
▪ 해당 사항과 관련이 없다



❑ superkey : relation에서 tuples를 unique하게 식별할 수 있는 attributes set
▪ e.g) PLAYER(id, name, team_id, back_number, birth_data)의 superkey는 {id,name,team_id,back_number},{team_id,back_number,},{back_number,birth_data},. . . etc



❑ candidate key : 어느한 attribute라도 제거하면 unique하게 tuples를 식별할 수 없는 super key
▪ key or minimal superkey
▪ e.g) PLAYER(id, name, team_id, back_number, birth_data)의 candidate key는 {id}, {team_id, back_number}



❑ primary key : relation에서 tuples를 unique하게 식별하기 위해 선택된 candidate key  (attribute가 적은거 보통 선택)
▪ e.g) PLAYER(id, name, team_id, back_number, birth_data)의 primary key는 {id} or {team_id, back_number}



❑ unique key :  primary key가 아닌 candidate keys
▪ alternate key
▪ e.g) PLAYER(id, name, team_id, back_number, birth_data)의 unique key는 {team_id, back_number}



❑ foreign key : 다른 relation의 PK를 참조하는 attribute set
▪ e.g) PLAYER(id, name, team_id, back_number, birth_data)와 TEAM(id, name, manager)가 있을 때 foreign key는 PLAYER의 {team_id}



❑ constraints : relation database의 relation들이 언제나 항상 지켜줘야 하는 제약 사항



❑ implicit constraints : relational data model 자체가 가지는 constraints
▪ relation은 중복되는 tulpe을 가질 수 없다
▪ relation 내에서는 같은 이름의 attribute를 가질 수 없다



❑ schema-based constraints : 주로 DDL을 통해 schema에 직접 명시할 수 있는 constraints
▪ explicit constraints
▪ 종류 
  • domain constraints : attribute의 value는 해당 attribute의 domain에 속한 value여야 한다
  • key constraints : 서로다른 tulpes는 같은 value의 key를 사질 수 없다
  • NULL value constraint : attribute가 NOT NULL로 명시됐다면 NULL을 값으로 가질 수 없다
  • entity integrity constraint : primary key는 value에 NULL을 가질 수 없다
  • referential integrity constraint : FK와 PK와 같이 도메인이 같아야 하고 PK에 없는 values를 FK가 값으로 가질 수 없다
